
class DBHelper{static get DATABASE_URL(){const port=1337
return`http://localhost:${port}/restaurants`;}
static fetchRestaurants(callback){fetch(DBHelper.DATABASE_URL).then(response=>{if(response.status===200){response.json().then(json=>{callback(null,json)}).catch(error=>{callback(error,null)});}else{callback((`Request failed. Returned status of ${response.status}`),null);}}).catch(error=>callback(error,null));}
static fetchReview(callback){fetch('http://localhost:1337/reviews').then(response=>{if(response.status===200){response.json().then(json=>{callback(null,json);return}).catch(error=>{callback(error,null)});}else{callback((`Request failed. Returned status of ${response.status}`),null);}}).catch(error=>callback(error,null));}
static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant);}else{callback('Restaurant does not exist',null);}}});}
static fetchReviewById(id,callback){fetch('http://localhost:1337/reviews/?restaurant_id='+id).then(response=>{if(response.status===200){response.json().then(json=>{console.log("Review From fetchRestaurant",json);callback(null,json);return}).catch(error=>{callback(error,null)});}else{callback((`Request failed. Returned status of ${response.status}`),null);}}).catch(error=>callback(error,null));}
static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results);}});}
static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results);}});}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{let results=restaurants
if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine);}
if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood);}
callback(null,results);}});}
static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood)
const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)
callback(null,uniqueNeighborhoods);}});}
static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type)
const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i)
callback(null,uniqueCuisines);}});}
static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`);}
static imageUrlForRestaurant(restaurant){return(`/img/${restaurant.photograph}`);}
static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker;}
static restaurantFavouriteHandler(restaurant_id,favVal,callback){var myInit={method:'PUT',headers:new Headers(),mode:'cors',cache:'default'};fetch('http://localhost:1337/restaurants/'+restaurant_id+'/?is_favorite='+favVal,myInit).then(response=>{if(response.status===200){callback(null,1);}else{callback((`Request failed. Returned status of ${response.status}`),null);}}).catch(error=>callback(error,null));}}