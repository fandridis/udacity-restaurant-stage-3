
class DBHelper{static get DATABASE_URL(){const port=1337
return`http://localhost:${port}/restaurants`;}
static fetchRestaurants(callback){fetch(DBHelper.DATABASE_URL).then(response=>{if(response.status===200){response.json().then(json=>{callback(null,json)}).catch(error=>{callback(error,null)});}else{callback((`Request failed. Returned status of ${response.status}`),null);}}).catch(error=>callback(error,null));}
static fetchReview(callback){fetch('http://localhost:1337/reviews').then(response=>{if(response.status===200){response.json().then(json=>{callback(null,json);return}).catch(error=>{callback(error,null)});}else{callback((`Request failed. Returned status of ${response.status}`),null);}}).catch(error=>callback(error,null));}
static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant);}else{callback('Restaurant does not exist',null);}}});}
static fetchReviewById(id,callback){fetch('http://localhost:1337/reviews/?restaurant_id='+id).then(response=>{if(response.status===200){response.json().then(json=>{console.log("Review From fetchRestaurant",json);callback(null,json);return}).catch(error=>{callback(error,null)});}else{callback((`Request failed. Returned status of ${response.status}`),null);}}).catch(error=>callback(error,null));}
static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results);}});}
static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results);}});}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{let results=restaurants
if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine);}
if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood);}
callback(null,results);}});}
static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood)
const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)
callback(null,uniqueNeighborhoods);}});}
static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type)
const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i)
callback(null,uniqueCuisines);}});}
static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`);}
static imageUrlForRestaurant(restaurant){return(`/img/${restaurant.photograph}`);}
static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker;}
static restaurantFavouriteHandler(restaurant_id,favVal,callback){var myInit={method:'PUT',headers:new Headers(),mode:'cors',cache:'default'};fetch('http://localhost:1337/restaurants/'+restaurant_id+'/?is_favorite='+favVal,myInit).then(response=>{if(response.status===200){callback(null,1);}else{callback((`Request failed. Returned status of ${response.status}`),null);}}).catch(error=>callback(error,null));}}

function lazyLoad(){const images=document.querySelectorAll('.js-lazy-image');const config={rootMargin:'50px 0px',threshold:0.01};let imageCount=images.length;let observer;if(!('IntersectionObserver'in window)){loadImagesImmediately(images);}else{observer=new IntersectionObserver(onIntersection,config);for(let i=0;i<images.length;i++){let image=images[i];if(image.classList.contains('js-lazy-image--handled')){continue;}
observer.observe(image);}}
function fetchImage(url){return new Promise((resolve,reject)=>{const image=new Image();image.src=url;image.onload=resolve;image.onerror=reject;});}
function preloadImage(image){const src=image.dataset.src;if(!src){return;}
return fetchImage(src).then(()=>{applyImage(image,src);});}
function loadImagesImmediately(images){for(let i=0;i<images.length;i++){let image=images[i];preloadImage(image);}}
function disconnect(){if(!observer){return;}
observer.disconnect();}
function onIntersection(entries){if(imageCount===0){observer.disconnect();}
for(let i=0;i<entries.length;i++){let entry=entries[i];if(entry.intersectionRatio>0){imageCount--;observer.unobserve(entry.target);preloadImage(entry.target);}}}
function applyImage(img,src){img.classList.add('js-lazy-image--handled');img.src=src;img.classList.add('fade-in');}}

let restaurants,neighborhoods,cuisines
var map
var markers=[];document.addEventListener('DOMContentLoaded',(event)=>{fetchNeighborhoods();fetchCuisines();});fetchNeighborhoods=()=>{DBHelper.fetchNeighborhoods((error,neighborhoods)=>{if(error){console.error(error);}else{self.neighborhoods=neighborhoods;fillNeighborhoodsHTML();}});}
fillNeighborhoodsHTML=(neighborhoods=self.neighborhoods)=>{const select=document.getElementById('neighborhoods-select');neighborhoods.forEach(neighborhood=>{const option=document.createElement('option');option.innerHTML=neighborhood;option.value=neighborhood;option.label=neighborhood;select.append(option);});}
fetchCuisines=()=>{DBHelper.fetchCuisines((error,cuisines)=>{if(error){console.error(error);}else{self.cuisines=cuisines;fillCuisinesHTML();}});}
fillCuisinesHTML=(cuisines=self.cuisines)=>{const select=document.getElementById('cuisines-select');cuisines.forEach(cuisine=>{const option=document.createElement('option');option.innerHTML=cuisine;option.value=cuisine;option.label=cuisine;select.append(option);});}
window.initMap=()=>{let loc={lat:40.722216,lng:-73.987501};self.map=new google.maps.Map(document.getElementById('map'),{zoom:12,center:loc,scrollwheel:false,format:'jpg'});updateRestaurants();};updateRestaurants=()=>{const cSelect=document.getElementById('cuisines-select');const nSelect=document.getElementById('neighborhoods-select');const cIndex=cSelect.selectedIndex;const nIndex=nSelect.selectedIndex;const cuisine=cSelect[cIndex].value;const neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,(error,restaurants)=>{if(error){console.error(error);}else{resetRestaurants(restaurants);fillRestaurantsHTML();}})}
resetRestaurants=(restaurants)=>{self.restaurants=[];const ul=document.getElementById('restaurants-list');ul.innerHTML='';self.markers.forEach(m=>m.setMap(null));self.markers=[];self.restaurants=restaurants;}
fillRestaurantsHTML=(restaurants=self.restaurants)=>{const ul=document.getElementById('restaurants-list');restaurants.forEach(restaurant=>{ul.append(createRestaurantHTML(restaurant));});addMarkersToMap();}
createRestaurantHTML=(restaurant)=>{const li=document.createElement('li');li.setAttribute('role','listitem');const favIcon=document.createElement('span');favIcon.className='fav-icon';favIcon.setAttribute('data-id',restaurant.id);const favImg=document.createElement('img');if(restaurant.is_favorite==='true'){favImg.alt='restaurant is favourite';favImg.src='img/icons/ic_favorite_black_24px.svg';favImg.className='fav-img fav-fill';console.log("Favourite val",restaurant.is_favorite);}else{favImg.alt='restaurant is not favourite';favImg.src='img/icons/ic_favorite_border_black.svg';favImg.className='fav-img';}
favImg.addEventListener('click',(e)=>{if(e.target===e.currentTarget){var classAttr=e.target.className;if(classAttr==='fav-img'){DBHelper.restaurantFavouriteHandler(restaurant.id,true,(error,response)=>{if(response){favImg.alt='restaurant is favourite';favImg.src='img/icons/ic_favorite_black_24px.svg';e.target.className='fav-img fav-fill';}
else{alert("Something Went Wrong");console.log(error);}})}else{DBHelper.restaurantFavouriteHandler(restaurant.id,false,(error,response)=>{if(response){favImg.alt='restaurant is not favourite';favImg.src='img/icons/ic_favorite_border_black.svg';e.target.className='fav-img';}
else{alert("Something Went Wrong");console.log(error);}})}}});favIcon.append(favImg);li.append(favIcon);const image=document.createElement('img');image.className='restaurant-img js-lazy-image';image.alt=restaurant.name+' restautrant';var imgSrc=DBHelper.imageUrlForRestaurant(restaurant);image.setAttribute('data-src',imgSrc+'_thumb.webp');li.append(image);const name=document.createElement('h3');name.innerHTML=restaurant.name;name.tabIndex=0;li.append(name);const neighborhood=document.createElement('p');neighborhood.tabIndex=0;neighborhood.innerHTML=restaurant.neighborhood;li.append(neighborhood);const address=document.createElement('p');address.className='restaurant-address';address.innerHTML=restaurant.address;address.tabIndex=0;li.append(address);const more=document.createElement('a');more.innerHTML='View Details';more.href=DBHelper.urlForRestaurant(restaurant);li.append(more);li.onload=lazyLoad();return li}
addMarkersToMap=(restaurants=self.restaurants)=>{restaurants.forEach(restaurant=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map);google.maps.event.addListener(marker,'click',()=>{window.location.href=marker.url});self.markers.push(marker);});}

let restaurant;var map;window.initMap=()=>{fetchRestaurantFromURL((error,restaurant)=>{if(error){console.error(error);}else{self.map=new google.maps.Map(document.getElementById('map'),{zoom:16,center:restaurant.latlng,scrollwheel:false});fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant,self.map);}});}
fetchRestaurantFromURL=(callback)=>{if(self.restaurant){callback(null,self.restaurant)
return;}
const id=getParameterByName('id');if(!id){error='No restaurant id in URL'
callback(error,null);}else{DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant;if(!restaurant){console.error(error);return;}
fillRestaurantHTML();fillFloatingAction();callback(null,restaurant)});}};fetchReviewFromURL=()=>{if(self.review){return;}
const id=getParameterByName('id');if(!id){error='No restaurant id in URL'}else{DBHelper.fetchReviewById(id,(error,reviews)=>{self.reviews=reviews;if(!reviews){console.error(error);fillReviewsHTML(null);return;}
fillReviewsHTML();})}}
fillRestaurantHTML=(restaurant=self.restaurant)=>{const name=document.getElementById('restaurant-name');name.innerHTML=restaurant.name;const address=document.getElementById('restaurant-address');address.innerHTML=restaurant.address;const image=document.getElementById('restaurant-img');image.className='restaurant-img js-lazy-image';var imgSrc=DBHelper.imageUrlForRestaurant(restaurant);image.alt=restaurant.name+' restautrant';image.setAttribute('data-src',imgSrc+'.webp');image.onload=lazyLoad();const cuisine=document.getElementById('restaurant-cuisine');cuisine.innerHTML=restaurant.cuisine_type;if(restaurant.operating_hours){fillRestaurantHoursHTML();}
fetchReviewFromURL();}
fillRestaurantHoursHTML=(operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById('restaurant-hours');for(let key in operatingHours){const row=document.createElement('tr');const day=document.createElement('td');day.innerHTML=key;row.appendChild(day);const time=document.createElement('td');time.innerHTML=operatingHours[key];row.setAttribute('tabindex',0);row.appendChild(time);hours.appendChild(row);}}
fillReviewsHTML=(reviews=self.reviews)=>{const container=document.getElementById('reviews-container');const title=document.createElement('h3');title.innerHTML='Reviews';container.appendChild(title);if(!reviews){const noReviews=document.createElement('p');noReviews.innerHTML='No reviews yet!';container.appendChild(noReviews);return;}
const ul=document.getElementById('reviews-list');reviews.forEach(review=>{ul.appendChild(createReviewHTML(review));});container.appendChild(ul);}
createReviewHTML=(review)=>{const li=document.createElement('li');li.setAttribute('role','listitem')
const name=document.createElement('strong');name.innerHTML=review.name;li.appendChild(name);const date=document.createElement('p');date.innerHTML=getDateFromTimestamp(review.createdAt);li.appendChild(date);const rating=document.createElement('p');rating.innerHTML=`Rating: ${review.rating}`;li.appendChild(rating);const comments=document.createElement('p');comments.innerHTML=review.comments;li.appendChild(comments);li.tabIndex=0;return li;}
fillBreadcrumb=(restaurant=self.restaurant)=>{const breadcrumb=document.getElementById('breadcrumb');const li=document.createElement('li');li.innerHTML=restaurant.name;li.setAttribute('aria-current','page');breadcrumb.appendChild(li);}
fillFloatingAction=(restaurant=self.restaurant)=>{var floatingAction=document.querySelector('#floating-action');const favIcon=document.createElement('span');favIcon.className='fav-icon';favIcon.setAttribute('data-id',restaurant.id);const favImg=document.createElement('img');if(restaurant.is_favorite==='true'){favImg.alt='restaurant is favourite';favImg.src='img/icons/ic_favorite_black_24px.svg';favImg.className='fav-img fav-fill';}else{favImg.alt='restaurant is not favourite';favImg.src='img/icons/ic_favorite_border_black.svg';favImg.className='fav-img';}
favImg.addEventListener('click',(e)=>{if(e.target===e.currentTarget){var classAttr=e.target.className;if(classAttr==='fav-img'){DBHelper.restaurantFavouriteHandler(restaurant.id,true,(error,response)=>{if(response){favImg.alt='restaurant is favourite';favImg.src='img/icons/ic_favorite_black_24px.svg';e.target.className='fav-img fav-fill';}
else{alert("Something Went Wrong");console.log(error);}})}else{DBHelper.restaurantFavouriteHandler(restaurant.id,false,(error,response)=>{if(response){favImg.alt='restaurant is not favourite';favImg.src='img/icons/ic_favorite_border_black.svg';e.target.className='fav-img';}
else{alert("Something Went Wrong");console.log(error);}})}}});favIcon.append(favImg);floatingAction.append(favIcon);}
getDateFromTimestamp=(timeStamp)=>{var date=new Date(timeStamp);return date.getDate()+'/'+(date.getMonth()+1)+'/'+date.getFullYear();}
getParameterByName=(name,url)=>{if(!url)
url=window.location.href;name=name.replace(/[\[\]]/g,'\\$&');const regex=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),results=regex.exec(url);if(!results)
return null;if(!results[2])
return'';return decodeURIComponent(results[2].replace(/\+/g,' '));}